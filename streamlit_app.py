import functools
import json
import os
import time
import uuid
from datetime import datetime, timedelta

import extra_streamlit_components as stx
import streamlit as st
from dotenv import load_dotenv
from streamlit_extras.stylable_container import stylable_container

from conversation import AssistantWithMonitoring
from situations import situations, Message, DEFAULT_SITUATION
from state import State

load_dotenv()

wide_button = functools.partial(st.button, use_container_width=True)


def get_manager():
    return stx.CookieManager()


cookie_manager = get_manager()

# if cookie_manager.get("authenticated"):
#     cookie_manager.delete("authenticated")

authenticated = cookie_manager.get("authenticated")
if not authenticated:
    password = st.text_input("–ü–∞—Ä–æ–ª—å")
    if password == os.getenv("PASSWORD"):
        authenticated = "user"
        cookie_manager.set("authenticated", authenticated)
    if password == os.getenv("ADMIN_PASSWORD"):
        authenticated = "admin"
        cookie_manager.set("authenticated", authenticated)
    st.stop()


if cookie_manager.get("user_id") is None:
    cookie_manager.set(
        "user_id",
        str(uuid.uuid4()),
        expires_at=datetime.now() + timedelta(days=90),
    )

ss = st.session_state

# if "authenticated" not in ss:
#     password = st.text_input("–ü–∞—Ä–æ–ª—å")
#     if password == os.getenv("PASSWORD"):
#         ss.authenticated = "user"
#         st.rerun()
#     if password == os.getenv("ADMIN_PASSWORD"):
#         ss.authenticated = "admin"
#         st.rerun()
#     st.stop()

if "current_situation" not in ss:
    ss.current_situation = DEFAULT_SITUATION
situation = situations[ss.current_situation]

if "user_id" not in ss:
    ss.user_id = cookie_manager.get("user_id")

if "session_id" not in ss:
    ss.session_id = uuid.uuid4()

if "situation" not in ss:
    ss.situation = situation.model_copy(deep=True)

if "state" not in ss:
    ss.state = State.intro

messages = ss.situation.messages
role_mapping = {
    "user": ss.situation.user_role,
    "assistant": ss.situation.assistant_role,
    "feedback": "–§–∏–¥–±—ç–∫",
}

avatar_mapping = {
    "user": ss.situation.user_avatar,
    "assistant": ss.situation.assistant_avatar,
    "feedback": "üòé",
}

avatar_mapping = {role_mapping[role]: avatar for role, avatar in avatar_mapping.items()}


def get_assistant():
    return AssistantWithMonitoring(user_id=ss.user_id, session_id=ss.session_id)


assistant = get_assistant()

st.write("# –°–∏–º—É–ª—è—Ç–æ—Ä –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")

intro = """
## –í–≤–µ–¥–µ–Ω–∏–µ

–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Å–∏–º—É–ª—è—Ç–æ—Ä, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –±–µ–∑ —è–≤–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ª—é–¥—å–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –í—Å–µ, —á—Ç–æ —Ç—ã —Å–∫–∞–∂–µ—à—å, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∑–¥–µ—Å—å, –∏ –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, —á—Ç–æ —Ç—ã —Ç—É—Ç –±—ã–ª (–µ—Å–ª–∏ —Ç—ã –Ω–µ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å ü§´).

### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ - –∂–º–∏ `–ù–∞—á–∞—Ç—å` –∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ñ—Ä–∞–∑—ã —Å–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç. –í –∫–æ–Ω—Ü–µ –æ–Ω –≤—ã–¥–∞—Å—Ç —Ç–µ–±–µ —Ñ–∏–¥–±—ç–∫. –ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é - –æ–±–Ω–æ–≤–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É üîÑ.

P.s. –ï—â–µ —è –æ—Å—Ç–∞–≤–∏–ª —Ç–µ–±–µ —á–∞—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ - —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –¥–∞–∂–µ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ —Å–≤–æ—é, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å.
""".strip()

st.write(intro)



st.write("## –°–∏—Ç—É–∞—Ü–∏—è")
if option := st.selectbox(
    "–í—ã–±–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–∏",
    list(situations.keys()),
    index=list(situations.keys()).index(ss.current_situation),
):
    if option != ss.current_situation:
        print("option", option, ss.current_situation)
        ss.situation = situations[option].model_copy(deep=True)
        ss.state = State.intro
        ss.current_situation = option
        st.rerun()

if st.toggle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ (–Ω–µ —Å–º–æ—Ç—Ä–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å –ø–æ —á–µ—Å—Ç–Ω–æ–º—É)"):
    ss.situation.description = st.text_area(
        "–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏", value=ss.situation.description
    )
    ss.situation.user_role = st.text_input("–†–æ–ª—å –∏–≥—Ä–æ–∫–∞", value=ss.situation.user_role)
    ss.situation.assistant_role = st.text_input(
        "–†–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", value=ss.situation.assistant_role
    )
    ss.situation.assistant_role_description = st.text_area(
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
        value=ss.situation.assistant_role_description,
    )
    for i in range(ss.situation.initial_message_number):
        with st.container(border=True):
            st.write(f"–°–æ–æ–±—â–µ–Ω–∏–µ {i + 1}")
            roles = [
                ss.situation.user_role,
                ss.situation.assistant_role,
            ]
            messages[i].role = (
                st.selectbox(
                    f"–†–æ–ª—å",
                    roles,
                    index=roles.index(messages[i].role),
                    key=f"role_default_message_{i}",
                )
                or roles[0]
            )
            messages[i].content = st.text_area(f"–¢–µ–∫—Å—Ç", value=messages[i].content)
            if wide_button(f"–£–¥–∞–ª–∏—Ç—å", key=f"delete_default_message_{i}"):
                messages.pop(i)
                ss.situation.initial_message_number -= 1
                st.rerun()
    if wide_button("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"):
        messages.append(Message(role=ss.situation.user_role, content=""))
        ss.situation.initial_message_number += 1
        st.rerun()

    ids = {
        "user_id": ss.user_id,
        "session_id": ss.session_id,
    }

st.write(ss.situation.description)
st.write(f"–¢–≤–æ—è —Ä–æ–ª—å: **{ss.situation.user_role}**")


def start():
    if ss.state == State.intro:
        ss.state = State.user_input


def delete_message():
    if len(messages) > ss.situation.initial_message_number:
        messages.pop()
        ss.state = State.user_input


def run_generation():
    ss.state = State.response_generation


def get_feedback():
    ss.state = State.feedback_generation


wide_button("–ù–∞—á–∞—Ç—å", on_click=start)

if ss.state == State.intro:
    st.stop()


for i, message in enumerate(messages):
    with st.chat_message(message.role, avatar=avatar_mapping[message.role]):
        if message.explanation and authenticated == "admin":
            with stylable_container(
                "codeblock",
                """
                code {
                    white-space: pre-wrap !important;
                }
                """,
            ):
                st.write(
                    "<details><summary>Analysis</summary>"
                    f"\n\n```\n{message.explanation}\n```\n"
                    "</blockquote></details>",
                    unsafe_allow_html=True,
                )
        # st.text_input(f"{role_mapping[message.role]}", value=message.content)
        st.write(f"**{message.role}**: {message.content}")


if authenticated == "admin":
    with st.container():
        col1, col2, col3 = st.columns([0.25, 0.25, 0.5])
        with col1:
            wide_button(
                "–£–¥–∞–ª–∏—Ç—å",
                on_click=delete_message,
                disabled=len(messages) <= ss.situation.initial_message_number,
            )
        with col2:
            wide_button(
                "–ó–∞–ø—É—Å—Ç–∏—Ç—å",
                on_click=run_generation,
                disabled=ss.state != State.user_input,
            )

        with col3:
            wide_button(
                "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–¥–±—ç–∫",
                on_click=get_feedback,
                disabled=ss.state not in [State.game_end, State.user_input],
            )
else:
    if ss.state == State.game_end:
        wide_button(
            "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–¥–±—ç–∫",
            on_click=get_feedback,
            disabled=ss.state != State.game_end,
        )


if message := st.chat_input(
    "–¢–≤–æ–π –æ—Ç–≤–µ—Ç",
    disabled=ss.state not in [State.user_input, State.response_generation],
):
    messages.append(Message(role=ss.situation.user_role, content=message))
    ss.state = State.response_generation
    st.rerun()


if ss.state == State.response_generation:
    with st.chat_message(
        ss.situation.assistant_role, avatar=avatar_mapping[ss.situation.assistant_role]
    ):
        with st.spinner("–ü–µ—á–∞—Ç–∞–µ—Ç..."):
            response = assistant.get_response(ss.situation)

    messages.append(
        Message(
            role=ss.situation.assistant_role,
            content=response["phrase"],
            explanation=json.dumps(response, indent=2, ensure_ascii=False),
        )
    )
    ss.state = State.user_input
    st.rerun()


# defence_analisys = [
#     json.loads(m.explanation)["defence_analysis"]
#     for m in messages
#     if m.explanation
# ]
# defence_score = (
#     sum(int(analysis["score"]) for analysis in defence_analisys) / len(defence_analisys)
#     if defence_analisys
#     else 0
# )
if messages and messages[-1].explanation:
    print(json.loads(messages[-1].explanation)["next_behaviour_type"])
if ss.state == State.user_input and (
    (
        messages
        and messages[-1].explanation
        and json.loads(messages[-1].explanation)["next_behaviour_type"] != "Manipulation"
    )
    or len(messages) > 10
    # or (defence_score < 5 and len(messages) > 8)
):
    ss.state = State.game_end
    st.rerun()

if ss.state == State.feedback_generation:
    with st.chat_message("–§–∏–¥–±—ç–∫", avatar="üòé"):
        with st.spinner("–ü–µ—á–∞—Ç–∞–µ—Ç..."):
            response = assistant.get_feedback(ss.situation)
    messages.append(Message(role="–§–∏–¥–±—ç–∫", content=response))
    ss.state = State.feedback_provided
    st.rerun()
