import json
import os
import uuid
from datetime import datetime, timedelta

import extra_streamlit_components as stx
import streamlit as st
from dotenv import load_dotenv
from streamlit_extras.stylable_container import stylable_container

from conversation import AssistantWithMonitoring
from situation import Message, situation

load_dotenv()


# @st.cache_resource(experimental_allow_widgets=True)
def get_manager():
    return stx.CookieManager()


cookie_manager = get_manager()

authenticated = cookie_manager.get("authenticated")
if not authenticated:
    password = st.text_input("–ü–∞—Ä–æ–ª—å")
    if password == os.getenv("PASSWORD"):
        authenticated = True
        cookie_manager.set("authenticated", authenticated)
    st.stop()


if cookie_manager.get("user_id") is None:
    cookie_manager.set(
        "user_id",
        str(uuid.uuid4()),
        expires_at=datetime.now() + timedelta(days=90),
    )

if "user_id" not in st.session_state:
    st.session_state.user_id = cookie_manager.get("user_id")

if "session_id" not in st.session_state:
    st.session_state.session_id = uuid.uuid4()

if "situation" not in st.session_state:
    st.session_state.situation = situation.model_copy()

if "turn" not in st.session_state:
    st.session_state.turn = "start"


messages = st.session_state.situation.messages


# @st.cache_resource
def get_assistant():
    return AssistantWithMonitoring(
        user_id=st.session_state.user_id, session_id=st.session_state.session_id
    )


assistant = get_assistant()

st.write("# –°–∏–º—É–ª—è—Ç–æ—Ä –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
st.write("## –í–≤–µ–¥–µ–Ω–∏–µ")

intro = """
## –í–≤–µ–¥–µ–Ω–∏–µ

–ü—Ä–∏–≤–µ—Ç! –Ø –≤–µ—Ä—é, —á—Ç–æ –ª—É—á—à–µ–µ –æ–±—É—á–µ–Ω–∏–µ - –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ, –∫–æ–≥–¥–∞ —Ç—ã –º–æ–∂–µ—à—å —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É, —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ—à–∏–±–∫–∏, –∞ –ø–æ—Ç–æ–º –ø—ã—Ç–∞—Ç—å—Å—è –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –Ω–µ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏ –∫–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö (–∞–≥–∞, –∞ –ø–æ—Ç–æ–º –≤ –¥–≤–∞ —á–∞—Å–∞ –Ω–æ—á–∏ –ª–µ–∂–∏—à—å –∏ –¥—É–º–∞–µ—à—å, –∫–∞–∫ –Ω–∞–¥–æ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–∏—Ç—å).

–ü–æ—ç—Ç–æ–º—É —è —Å–¥–µ–ª–∞–ª –¥–ª—è —Ç–µ–±—è —ç—Ç–æ—Ç —Å–∏–º—É–ª—è—Ç–æ—Ä, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –±–µ–∑ —è–≤–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ª—é–¥—å–º–∏. –í—Å–µ, —á—Ç–æ —Ç—ã —Å–∫–∞–∂–µ—à—å, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∑–¥–µ—Å—å, –∏ –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, —á—Ç–æ —Ç—ã —Ç—É—Ç –±—ã–ª (–µ—Å–ª–∏ —Ç—ã –Ω–µ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å ü§´).

### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ - –∂–º–∏ `–ù–∞—á–∞—Ç—å` –∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ñ—Ä–∞–∑—ã —Å–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç. –í –∫–æ–Ω—Ü–µ –æ–Ω –≤—ã–¥–∞—Å—Ç —Ç–µ–±–µ —Ñ–∏–¥–±—ç–∫. –ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é - –æ–±–Ω–æ–≤–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É üîÑ.

P.s. –ï—â–µ —è –æ—Å—Ç–∞–≤–∏–ª —Ç–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ - —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é, —Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫—Ä—ã—Ç—ã–µ "–º—ã—Å–ª–∏" –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –∞ —Ç–∞–∫–∂–µ –æ—Ç–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞. –ù–æ –ø–æ–º–Ω–∏, —á—Ç–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ —É —Ç–µ–±—è –Ω–µ –±—É–¥–µ—Ç —Ç–∞–∫–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ üòâ"
""".strip()
st.write(intro)

st.write("## –°–∏—Ç—É–∞—Ü–∏—è")
if st.toggle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ (–Ω–µ —Å–º–æ—Ç—Ä–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å –ø–æ —á–µ—Å—Ç–Ω–æ–º—É)"):
    st.session_state.situation.description = st.text_area(
        "–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏", value=st.session_state.situation.description
    )
    st.session_state.situation.player_role = st.text_input(
        "–†–æ–ª—å –∏–≥—Ä–æ–∫–∞", value=st.session_state.situation.player_role
    )
    st.session_state.situation.assistant_role = st.text_input(
        "–†–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", value=st.session_state.situation.assistant_role
    )
    st.session_state.situation.assistant_role_description = st.text_area(
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
        value=st.session_state.situation.assistant_role_description,
    )
    for i in range(st.session_state.situation.initial_message_number):
        with st.container(border=True):
            st.write(f"–°–æ–æ–±—â–µ–Ω–∏–µ {i + 1}")
            roles = ["user", "assistant"]
            st.selectbox(
                f"–†–æ–ª—å", roles, index=roles.index(messages[i].role), key=f"role_{i}"
            )
            st.text_area(f"–¢–µ–∫—Å—Ç", value=messages[i].content, key=f"content_{i}")
            if st.button(f"–£–¥–∞–ª–∏—Ç—å", key=f"delete_{i}", use_container_width=True):
                messages.pop(i)
                st.session_state.situation.initial_message_number -= 1
                st.rerun()
    if st.button("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", key="add_message", use_container_width=True):
        messages.append(Message(role="user", content=""))
        st.session_state.situation.initial_message_number += 1
        st.rerun()

    # st.write(st.session_state.session_id)
    st.write(
        {"user_id": st.session_state.user_id, "session_id": st.session_state.session_id}
    )

st.write(st.session_state.situation.description)
st.write(f"–¢–≤–æ—è —Ä–æ–ª—å: **{st.session_state.situation.player_role}**")



if st.button("–ù–∞—á–∞—Ç—å", key="start", use_container_width=True) and st.session_state.turn == "start":
    st.session_state.turn = "user"
    st.rerun()

if st.session_state.turn == "start":
    st.stop()




# print(messages)
role_mapping = {
    "user": st.session_state.situation.player_role,
    "assistant": st.session_state.situation.assistant_role,
}

for i, message in enumerate(messages):
    with st.chat_message(message.role):
        if message.explanation:
            with stylable_container(
                "codeblock",
                """
                code {
                    white-space: pre-wrap !important;
                }
                """,
            ):
                st.write(
                    "<details><summary>Analysis</summary>"
                    f"\n\n```\n{message.explanation}\n```\n"
                    "</blockquote></details>",
                    unsafe_allow_html=True,
                )
                # st.write(message.enriched_content, unsafe_allow_html=True)
            # continue
        # st.text_input(f"{role_mapping[message.role]}", value=message.content)
        st.write(f"**{role_mapping[message.role]}**: {message.content}")
        # if i == len(messages) - 1:
with st.container():
    col1, col2, col3 = st.columns([0.2, 0.2, 0.6])
    with col1:
        if st.button("–£–¥–∞–ª–∏—Ç—å", key="delete_last_message", use_container_width=True):
            if len(messages) > 1:
                messages.pop()
                st.session_state.turn = "user"
                st.rerun()
    with col2:
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å", key="rerun", use_container_width=True):
            st.session_state.turn = "assistant"
            st.rerun()

    if st.session_state.turn == "feedback":
        with col3:
            if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–¥–±—ç–∫", key="feedback", use_container_width=True):
                st.session_state.turn = "feedback_request"
                st.rerun()

if prompt := st.chat_input(
    "–¢–≤–æ–π –æ—Ç–≤–µ—Ç", disabled=st.session_state.turn not in ["assistant", "user"]
):
    messages.append(Message(role="user", content=prompt))
    st.session_state.turn = "assistant"
    st.rerun()


if st.session_state.turn == "assistant":
    with st.chat_message("assistant"):
        with st.spinner("–ü–µ—á–∞—Ç–∞–µ—Ç..."):
            print(messages)
            response = assistant.get_response(st.session_state.situation)
    messages.append(
        Message(
            role="assistant",
            content=response["aggression_plan"]["phrase"],
            explanation=json.dumps(response, indent=2, ensure_ascii=False),
        )
    )
    st.session_state.turn = "user"
    st.rerun()


# defence_analisys = [
#     json.loads(m.explanation)["defence_analysis"]
#     for m in messages
#     if m.explanation
# ]
# defence_score = (
#     sum(int(analysis["score"]) for analysis in defence_analisys) / len(defence_analisys)
#     if defence_analisys
#     else 0
# )

if st.session_state.turn == "user" and (
    (
        messages
        and messages[-1].explanation
        and json.loads(messages[-1].explanation)["aggression_plan"]["tactic"]
        != "Manipulation"
    )
    or len(messages) > 10
    # or (defence_score < 5 and len(messages) > 8)
):
    st.session_state.turn = "feedback"
    st.rerun()

if st.session_state.turn == "feedback_request":
    with st.chat_message("assistant", avatar="üòé"):
        with st.spinner("–ü–µ—á–∞—Ç–∞–µ—Ç..."):
            response = assistant.get_feedback(st.session_state.situation)
    messages.append(Message(role="assistant", content=response))
    st.session_state.turn = "finish"
    st.rerun()
